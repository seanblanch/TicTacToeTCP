S. Blanchard
CSUCI
February 2021

				UPDATED TIC TAC TOE TFTP PROTOCOL
	Summary
	
		This document describes the protocol based on the Implementation of the game Tic Tac Toe. This game will allow two players to play a game of Tic Tac Toe over a network. A example of how the game of Tic Tac Toe works can be seen at https://playtictactoe.org/ where you will play against a computer.

	1.Purpose

		Define the syntax and order of messages exchanged by different users on the same network. We will be using the TFTP protocol that runs over UDP to transfer messages by using netascii mode. TFTP works over USP or SOCK_DGRAM. TFTP listens on port 69.

	2.Protocol

		opcode	operation
		1 	START – NOT USED
		2 	CONNECT – NOT USED
		3	 DISCONNECT – NOT USED
		4 	ERROR
		5 	VALID – NOT USED
		6 	MOVE
		7	END OF GAME – NOT USED
		8 	BOARDSTATE

		Values of Fields
		moveOfBoard: A int value 0-9 that represents play positions on the board
		stringOfBoard: Represents a string value of the board that the client can interpret and 		return a view of the tictactoe board that the user can read
		winner - Returns X, O, or T

       Server starts game and assigns player by whoever connected first
		Server to client randomly assigns player with a Counter

       Server figures out whose turn it is
       Server sends OPCODE, BOARDSTATE to Client
		Server to client (BOARDSTATE)

        	2 bytes   string
		+--------------------+
		|OPCODE|stringOfBoard|
		+--------------------+


	Client receives OPCODE, BOARDSTATE, and POSITIONONBOARD
		Client uses the BOARDSTATE and the tictactoeengine to
		Display the board
        	
		2 bytes   string  
		+--------------------+
		|OPCODE|stringOfBoard|
		+--------------------+
	
	Client Requests a move
		Client to server (MOVE)
		Client sends a request to server to move
		On position 1-9
        	
		2 bytes  int(1-9)
		+------------------+
		|OPCODE|moveOnBoard|
		+------------------+

	Server Receives the move from Client
		Server processes the move by converting 1-9 to a valid 0-8 int
		Position that the tictactoe engine can process
		Server checks if it is a valid move by calling is_move_valid
        	
		2 bytes  int(0-9)
 		+------------------+
 		|OPCODE|moveOnBoard|
 		+------------------+


	If the move was a winning move or Tie game
		Server sends update of move and updated BOARDSTATE back to client to be displayed
		Server also sends information about if X or O won or it was a Tie
		Server to client (BOARDSTATE) (winner)

       		2 bytes   string
 		+--------------------+------+
 		|OPCODE|stringOfBoard|winner|
 		+--------------------+------+

	If the move was valid
		Server sends update of move and updated BOARDSTATE back to client to be displayed
		Server to client (BOARDSTATE)

       		2 bytes   string
 		+--------------------+
 		|OPCODE|stringOfBoard|
 		+--------------------+

	If the move was error
		Client receives 'Invalid' move and ends the game
		(See Bugs below)
       	
		2 bytes 
 		+------+
 		|OPCODE|
 		+------+
	
	If the move was valid
		Client receives valid move and displays the BOARDSTATE
       	
		2 bytes   string
 		+--------------------+
 		|OPCODE|stringOfBoard|
 		+--------------------+

	
	(BUGS) / Needs Work
	If the move was ERROR
		Server sends ERROR in opcode
 
		2 bytes
		+------+
 		|OPCODE|
 		+------+

	If the move was ERROR
		Client receives ERROR in opcode
		And prints ERROR: Invalid move
 
		2 bytes
		+------+
 		|OPCODE|
 		+------+
		

	3.Examples
		   +   +
  		   |   |
  		 1 | 2 | 3
   		   |   |
	      +-------------+
		   |   |
 		 4 | 5 | 6
  		   |   |
	      +-------------+
 		   |   |
	         7 | 8 | 9
 	           |   |
 	           +   +

	Value Positions 
	Of Tic Tac Toe
	Board.

       	Player 1 Connect to server
        And assigned X to player 1

	Player 2 Connects to Server 
	And assigned O to player 2

        Server figures out whose turn it is
        Player 1 (X) has first move
        Player 1 (X) lays down his first move on 5
        Client Message		Server Message
       				6:stringOfBoard
        6:moveOnBoard(5)
       				8:stringOfBoard
       
        Server Figures out whose turn it is
        Player 2 (O) has next move
        Player 2 (O) Moves to position 9 VALID
        Client Message		Server Message
       				6:stringOfBoard
        6:moveOnBoard(9)
       				8:stringOfBoard

        Server Figures out whose turn it is
        Player 2 (X) has next move
        Player 2 (X) Moves to position 2 VALID
        Client Message		Server Message
       				6:stringOfBoard
        6:moveOnBoard(2)
       				8:stringOfBoard

 	Server Figures out whose turn it is
        Player 2 (O) has next move
        Player 2 (O) Moves to position 7 VALID
        Client Message		Server Message
       				6:stringOfBoard
        6:moveOnBoard(7)
       				8:stringOfBoard

      	Server Figures out whose turn it is
        Player 2 (X) has next move
        Player 2 (X) Moves to position 8 VALID
        Client Message		Server Message
       				6:stringOfBoard
        6:moveOnBoard(8)
       				8:stringOfBoard
				7:stringOfBoard:winner

	After this the Client will handle this and display the winner to both clients
	and shut down the clients. YEAH! YOU WON, or lost.... Sorry!

	3. Conclusion
		Networking can be challenging because you must figure out each move that is sending and receiving messages, and with implementing loops it's hard to figure out which move is being sent and received. Overall, from this project I learned a lot through a lot of trial and error and fixing MANY bugs that occurred throughout trying. Learning python syntax gave me a lot of issues along with learning how to move through different ports after being blocked many times and unable to figure out how to unblock without restarting my computer or just a quick fix by changing the port number. Relearning thread locking was interesting and took me awhile to understand when to call the lock and when to release it. Ultimately my first protocol created that was created was a terrible protocol to follow or very hard to follow with the way the TicTacToeEngine was implemented with many different “helper” functions that handled a lot of things from my first protocol that I had to figure out. As my first ever networking project or really touching networking without any deep knowledge I have a lot to learn but this was a humbling first project.

	4. BUGS
	Issue with displaying "ERROR: Invalid move' when the other client sends the same move, Currently ruins the output of board but recognizes the OPCODE 4 is sent, but cant prompt a user for a new move so it crashes the game.

